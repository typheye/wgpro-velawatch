<script>
import router from "@system.router";
import vibrator from "@system.vibrator";
import app from "@system.app";
import storage from "./utils/storage.js";
import fetch from "./utils/fetch.js";
import file from "./utils/file.js";
import crypto from "@system.crypto";
import prompt from "@system.prompt";
export default {
	goBack() {
		router.back();
	},
	goPageWithParams(_uri, _params) {
		router.push({
			uri: _uri,
			params: _params,
		});
	},
	goPage(_uri) {
		router.push({
			uri: _uri,
		});
	},
	goReplacePage(_uri) {
		router.replace({
			uri: _uri,
		});
	},
	goReplacePageWithParams(_uri, _params) {
		router.replace({
			uri: _uri,
			params: _params,
		});
	},
	toToast(_msg) {
		prompt.showToast({ message: _msg });
	},
	toTips(_title, _text) {
		router.push({
			uri: "pages/ui/popup/tips",
			params: {
				title: _title,
				text: _text,
			},
		});
	},
	toTipsWithQR(_title, _text, _uri) {
		router.push({
			uri: "pages/ui/popup/showqr",
			params: {
				title: _title,
				text: _text,
				uri: _uri,
			},
		});
	},
	toCancel(can) {
		this.shortVib(true);
		if (can) router.back();
	},
	toExit() {
		app.terminate();
	},
	getAppinfo() {
		return app.getInfo();
	},
	textFormat(template, data) {
		return template.replace(/\${(\w+)}/g, (_, key) => data[key] || "");
	},
	shortVib(can) {
		var _mode = "long";
		if (can) _mode = "short";
		vibrator.vibrate({
			mode: _mode,
		});
	},
	formatDecimal(num, decimalPlaces = 1) {
		if (typeof num !== "number" || isNaN(num)) return 123;
		const n = Math.max(0, Math.floor(decimalPlaces));
		if (n === 0) return Math.round(num).toString();
		return num.toFixed(n);
	},
	settingsInit() {
		this.settingsChange("wgsettings_init", true);
		file.writeText({
			uri: "internal://files/mnt/Documents/README",
			text: "Hello World",
		});
		file.delete({
			uri: "internal://files/mnt/Documents/README",
		});
	},
	settingsReset() {
		storage.clear();
	},
	settingsChange(_key, _data) {
		storage.set({
			key: _key,
			value: _data,
		});
	},
	settingsChangeMore(_key, _data) {
		storage.sets({
			keys: _key,
			values: _data,
		});
	},
	taccountInit() {
		this.settingsChangeMore(
			[
				"wgsettings_taccount_username",
				"wgsettings_taccount_password",
				"wgsettings_taccount_cookie",
				"wgsettings_taccount_nick",
				"wgsettings_taccount_userinfo",
			],
			["", "", "", "", ""]
		);
	},
	taccLoginCheck() {
		storage.get({
			key: "wgsettings_taccount_cookie",
			success: (cookie) => {
				if (cookie) {
					const timestamp0 = Date.now();
					var send0 =
						"type=get_data_update&cookie=" + cookie + "&time=" + timestamp0;
					fetch.fetch({
						url: "https://vela-service.typheye.com/api.php",
						data_GET: {
							type: "get_data_update",
							cookie: cookie,
							time: timestamp0,
							token: this.getHash(send0, "MD5"),
						},
						method: "GET",
						responseType: "text",
						success: (response) => {
							if (response.code == 200) {
								if (response.data) {
									const reqback = JSON.parse(response.data);
									if (reqback["code"] == "200") {
										if (reqback["info"]["v0"] == 1) {
											this.settingsChangeMore(
												[
													"wgsettings_taccount_cookie",
													"wgsettings_taccount_nick",
													"wgsettings_taccount_userinfo",
												],
												["", "", ""]
											);
											this.toTips(
												"",
												"登录状态已失效，请前往设置重新登录\nYour login session has expired. Please go to Settings to log in again."
											);
										}
									}
								}
							}
						},
					});
				}
			},
		});
	},
	isNumeric(str) {
		for (let i = 0; i < str.length; i++) {
			if (str[i] < "0" || str[i] > "9") {
				return false;
			}
		}
		return str.length > 0; // 空字符串返回false
	},
	getHash(_data, _algo) {
		return crypto.hashDigest({
			data: _data,
			algo: _algo,
		});
	},
	getRoomNumLimit() {
		return 5;
	},
	getPlugNumLimit() {
		return 5;
	},
};
</script>
