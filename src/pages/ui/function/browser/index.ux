<template>
	<div class="page">
		<div class="tab" onclick="toBack">
			<text class="tab-back">â€¹</text>
			<marquee class="tab-text">
				{{ $t("display.browser.tabtext") }}
			</marquee>
			<text class="tab-more"></text>
		</div>
		<div class="exit" if="{{ isLoading }}">
			<text class="exit-tip-text">Loading...</text>
		</div>
		<div class="exit" else>
			<text class="exit-tip-text">{{ $t("edittip.browser.text1") }}</text>
			<div
				class="edittext2-div"
				style="border: 4px solid {{ fc_v0 }}"
				ontouchstart="ht(-1, 'v0')"
				ontouchend="ht(0, 'v0')"
				onclick="toEditText"
			>
				<marquee class="edittext2" @click="changeState">
					{{ inputValues.uri }}
				</marquee>
			</div>
			<div class="exit-choose">
				<div
					class="exit-choose-value"
					style="background-color: {{ fc_v1 }}"
					ontouchstart="ht(1, 'v1')"
					ontouchend="ht(0, 'v1')"
					onclick="toLaunch()"
				>
					<img class="exit-choose-img" src="/common/mipmap/a55.png" />
				</div>
			</div>
		</div>
	</div>
</template>

<script>
import storage from "../../../../utils/storage.js";
export default {
	private: {
		fc_v0: "#3c3c3c",
		fc_v1: "#3c3c3c",
		isLoading: false,
		textValues: "",
		inputValues: { uri: "" },
	},
	ht(t, i) {
		if (t == 1) eval("this.fc_" + i + " = 'black'");
		else if (t == -1) eval("this.fc_" + i + " = '#32618D'");
		else eval("this.fc_" + i + " = '#3c3c3c'");
	},
	onReady() {
		this.inputReady();
	},
	inputReady() {
		if (this.textValues) {
			const TVs = JSON.parse(this.textValues);
			this.inputValues["uri"] = TVs["uri"];
		}
	},
	onBackPress() {
		this.$app.$def.toCancel(true);
		return true;
	},
	toLaunch() {
		this.isLoading = true;
		setTimeout(() => {
			this.$app.$def.goReplacePageWithParams("pages/ui/acts/browser/x1web", {
				uri: this.inputValues["uri"],
			});
		}, 1500);
	},
	toBack() {
		this.$app.$def.goBack();
	},
	toEditText() {
		storage.gets({
			keys: ["wgsettings_keyboardUseT9", "wgsettings_keyboardUseLongVibrate"],
			success: (datas) => {
				let _keyboardtype = "QWERTY";
				let _vibratemode = "short";
				if (datas.wgsettings_keyboardUseT9 == true) _keyboardtype = "T9";
				if (datas.wgsettings_keyboardUseLongVibrate == true)
					_vibratemode = "long";
				this.$app.$def.goReplacePageWithParams("pages/ui/popup/input", {
					reqPage: "pages/ui/function/browser",
					textValues: JSON.stringify(this.inputValues),
					textIndex: "uri",
					keyboardtype: _keyboardtype,
					vibratemode: _vibratemode,
				});
			},
		});
	},
};
</script>

<style>
@import "../../../../common/style/index.css";
@import "../../../../common/style/wgpro.css";
</style>
