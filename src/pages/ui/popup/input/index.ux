<import
	name="input-method"
	src="../../../../common/components/InputMethod/InputMethod.ux"
></import>
<template>
	<div class="page" @swipe="right">
		<div class="tab" onclick="toBackInput">
			<text class="tab-back">{{ exitext }}</text>
			<marquee class="tab-text"></marquee>
			<text class="tab-more"></text>
		</div>
		<div class="edittext-div" style="border: 4px solid {{ fc_v0 }}">
			<marquee class="edittext" @click="changeState">{{ textValue }}_</marquee>
		</div>
		<div class="edittext-stack-div"></div>
		<input-method
			hide="{{ hide }}"
			keyboardtype="{{ keyboardtype }}"
			maxlength="5"
			vibratemode="{{ vibratemode }}"
			screentype="{{ screentype }}"
			@visibility-change="onVisibilityChange"
			@key-down="onKeyDown"
			@delete="onDelete"
			@complete="onComplete"
		></input-method>
	</div>
</template>

<script>
export default {
	private: {
		exitext: "",
		fc_v0: "#32618D",
		fc_v1: "#3c3c3c",
		fc_v2: "#3c3c3c",
		textValue: "",
		textValues: "",
		textIndex: "",
		hide: false,
		reqPage: "",
		keyboardtype: "QWERTY", //QWERTY, T9
		vibratemode: "short",
		screentype: "circle", //pill-shaped, rect, circle
	},
	ht(t, i) {
		if (t) eval("this.fc_" + i + " = 'black'");
		else eval("this.fc_" + i + " = '#3c3c3c'");
	},
	onBackPress() {
		if (!this.hide) {
			this.$app.$def.shortVib(true);
			this.hide = !this.hide;
		} else {
			this.$app.$def.shortVib(true);
			this.toBack();
		}
		return true;
	},
	onReady() {
		const TVs = JSON.parse(this.textValues);
		if (TVs[this.textIndex]) this.textValue = TVs[this.textIndex];
	},
	onVisibilityChange() {
		//console.log("显示状态变更:" + JSON.stringify(evt));
		if (!this.hide) {
			this.fc_v0 = "#32618D";
			this.exitext = "";
		} else {
			this.fc_v0 = "#3c3c3c";
			this.exitext = "‹";
		}
	},
	onKeyDown() {
		// this.textValue += evt.detail.content;
		//console.log("按下按键:" + JSON.stringify(evt));
	},
	onDelete() {
		this.textValue = this.textValue.slice(0, -1);
		//console.log("删除字符");
	},
	toBack() {
		const TVs = JSON.parse(this.textValues);
		TVs[this.textIndex] = this.textValue;
		this.textValues = JSON.stringify(TVs);
		this.$app.$def.goReplacePageWithParams(this.reqPage, {
			textValues: this.textValues,
		});
	},
	toBackInput() {
		if (!this.hide) this.hide = !this.hide;
		else this.toBack();
	},
	changeState() {
		this.hide = !this.hide;
	},
	onComplete(evt) {
		this.textValue += evt.detail.content;
		//console.log("返回字符:" + JSON.stringify(evt));
	},
};
</script>

<style>
@import "../../../../common/style/index.css";
</style>
