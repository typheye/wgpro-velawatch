<template>
	<div class="page" @swipe="right">
		<div class="tab">
			<text class="tab-back"></text>
			<marquee class="tab-text">
				{{ $t("acts.wgchat.pushmsg.tabtext") }}
			</marquee>
			<text class="tab-more"></text>
		</div>
		<div class="exit">
			<div
				class="edittext2-div"
				style="border: 4px solid {{ fc_v0 }}"
				ontouchstart="ht(-1, 'v0')"
				ontouchend="ht(0, 'v0')"
				onclick="toEditText"
			>
				<marquee class="edittext2" @click="changeState">
					{{ inputValues.msg }}
				</marquee>
			</div>
			<div class="exit-choose">
				<div
					class="exit-choose-value"
					style="background-color: {{ fc_v1 }}"
					ontouchstart="ht(1, 'v1')"
					ontouchend="ht(0, 'v1')"
					onclick="toBack()"
				>
					<img class="exit-choose-img" src="/common/mipmap/a29.png" />
				</div>
				<div
					class="exit-choose-value"
					style="background-color: {{ fc_v2 }}"
					ontouchstart="ht(1, 'v2')"
					ontouchend="ht(0, 'v2')"
					onclick="toLaunch()"
				>
					<img class="exit-choose-img" src="/common/mipmap/a28.png" />
				</div>
			</div>
		</div>
	</div>
</template>

<script>
import fetch from "@system.fetch";
import storage from "../../../../../common/scripts/storage.js";
export default {
	private: {
		fc_v0: "#3c3c3c",
		fc_v1: "#3c3c3c",
		fc_v2: "#3c3c3c",
		textValues: "",
		inputValues: { msg: "" },
		roomId: "",
		usrNick: "",
		usrUid: "",
	},
	ht(t, i) {
		if (t == 1) eval("this.fc_" + i + " = 'black'");
		else eval("this.fc_" + i + " = '#3c3c3c'");
	},
	onReady() {
		this.inputReady();
		this.usrLoad();
	},
	usrLoad() {
		storage.get({
			key: "wgsettings_wgchat_nowRoomID",
			success: (data) => {
				if (data) this.roomId = data;
			},
		});
		storage.get({
			key: "wgsettings_taccount_nick",
			success: (data) => {
				if (data) this.usrNick = data;
			},
		});
		storage.get({
			key: "wgsettings_taccount_username",
			success: (data) => {
				if (data) this.usrUid = data;
			},
		});
	},
	inputReady() {
		if (this.textValues) {
			const TVs = JSON.parse(this.textValues);
			this.inputValues["msg"] = TVs["msg"];
		}
	},
	onBackPress() {
		this.$app.$def.toCancel(false);
		return true;
	},
	toLaunch() {
		if (!this.inputValues["msg"])
			this.$app.$def.toTips("", this.$t("acts.wgchat.pushmsg.err1"));
		else {
			fetch.fetch({
				url:
					this.$t("public.serverURL") +
					"talking/class/api.php?type=release&id=" +
					this.roomId,
				data: {
					name: this.usrNick,
					value: this.inputValues["msg"],
					code: "",
					uid: this.usrUid,
				},
				method: "POST",
				responseType: "text",
				success: (response) => {
					if (response.code == 200) {
						if (response.data) this.toBack();
						else
							this.$app.$def.toTips(
								"",
								this.$t("acts.wgchat.pushmsg.err3") + response.data
							);
					} else this.$app.$def.toTips("", this.$t("acts.wgchat.pushmsg.err2"));
				},
				fail: () => {
					this.$app.$def.toTips("", this.$t("acts.wgchat.pushmsg.err2"));
				},
			});
		}
	},
	toBack() {
		this.$app.$def.goBack();
	},
	toEditText() {
		this.$app.$def.goReplacePageWithParams("/pages/ui/popup/input", {
			reqPage: "/pages/ui/acts/wgchat/pushmsg",
			textValues: JSON.stringify(this.inputValues),
			textIndex: "msg",
		});
	},
};
</script>

<style>
@import "../../../../../common/style/index.css";
</style>
