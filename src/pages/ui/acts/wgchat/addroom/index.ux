<template>
	<div class="page" @swipe="right">
		<div class="tab">
			<text class="tab-back"></text>
			<marquee class="tab-text">
				{{ $t("menu.chatroomlist.def.item2.name") }}
			</marquee>
			<text class="tab-more"></text>
		</div>
		<div class="exit">
			<div
				class="edittext2-div"
				style="border: 4px solid {{ fc_v0 }}"
				ontouchstart="ht(-1, 'v0')"
				ontouchend="ht(0, 'v0')"
				onclick="toEditText"
			>
				<marquee class="edittext2" @click="changeState">
					{{ inputValues.id }}
				</marquee>
			</div>
			<div class="exit-choose">
				<div
					class="exit-choose-value"
					style="background-color: {{ fc_v1 }}"
					ontouchstart="ht(1, 'v1')"
					ontouchend="ht(0, 'v1')"
					onclick="toBack()"
				>
					<img class="exit-choose-img" src="/common/mipmap/a29.png" />
				</div>
				<div
					class="exit-choose-value"
					style="background-color: {{ fc_v2 }}"
					ontouchstart="ht(1, 'v2')"
					ontouchend="ht(0, 'v2')"
					onclick="toLaunch()"
				>
					<img class="exit-choose-img" src="/common/mipmap/a28.png" />
				</div>
			</div>
		</div>
	</div>
</template>

<script>
import fetch from "@system.fetch";
import storage from "../../../../../common/scripts/storage.js";
export default {
	private: {
		fc_v0: "#3c3c3c",
		fc_v1: "#3c3c3c",
		fc_v2: "#3c3c3c",
		textValues: "",
		inputValues: { id: "" },
	},
	ht(t, i) {
		if (t == 1) eval("this.fc_" + i + " = 'black'");
		else eval("this.fc_" + i + " = '#3c3c3c'");
	},
	onReady() {
		this.inputReady();
	},
	inputReady() {
		if (this.textValues) {
			const TVs = JSON.parse(this.textValues);
			this.inputValues["id"] = TVs["id"];
		}
	},
	onBackPress() {
		this.$app.$def.toCancel(false);
		return true;
	},
	toLaunch() {
		if (!this.$app.$def.isNumeric(this.inputValues["id"]))
			this.$app.$def.toTips("", this.$t("menu.chatroomlist.def.item2.err1"));
		else {
			var roomnumlimit = 3;
			storage.get({
				key: "wgsettings_wgchat_roomlist",
				success: (data) => {
					var roomlist = JSON.parse(data);
					if (roomlist.length >= roomnumlimit)
						this.$app.$def.toTips(
							"",
							this.$t("menu.chatroomlist.def.item2.err2")
						);
					else {
						fetch.fetch({
							url:
								this.$t("public.serverURL") +
								"talking/chat/" +
								this.inputValues["id"] +
								".json",
							responseType: "text",
							success: (response) => {
								if (response.code == 200) {
									const roomInfo = JSON.parse(response.data);
									roomlist.push({
										id: this.inputValues["id"],
										name: roomInfo.room,
									});
									roomlist = JSON.stringify(roomlist, null);
									this.$app.$def.settingsChange(
										"wgsettings_wgchat_roomlist",
										roomlist
									);
									this.toBack();
								} else
									this.$app.$def.toTips(
										"",
										this.$t("menu.chatroomlist.def.item2.err3")
									);
							},
							fail: () => {
								this.$app.$def.toTips(
									"",
									this.$t("menu.chatroomlist.def.item2.err3")
								);
							},
						});
					}
				},
				fail: () => {
					this.$app.$def.toTips("", this.$t("tips.fail"));
				},
			});
		}
	},
	toBack() {
		this.$app.$def.goReplacePage("/pages/ui/function/wgchat");
	},
	toEditText() {
		storage.gets({
			keys: ["wgsettings_keyboardUseT9", "wgsettings_keyboardUseLongVibrate"],
			success: (datas) => {
				let _keyboardtype = "QWERTY";
				let _vibratemode = "short";
				if (datas.wgsettings_keyboardUseT9) _keyboardtype = "T9";
				if (datas.wgsettings_keyboardUseLongVibrate) _vibratemode = "long";
				this.$app.$def.goReplacePageWithParams("/pages/ui/popup/input", {
					reqPage: "/pages/ui/acts/wgchat/addroom",
					textValues: JSON.stringify(this.inputValues),
					textIndex: "id",
					keyboardtype: _keyboardtype,
					vibratemode: _vibratemode,
				});
			},
		});
	},
};
</script>

<style>
@import "../../../../../common/style/index.css";
</style>
