<template>
	<div class="page">
		<div class="tab" onclick="toBack">
			<text class="tab-back">{{ tabtextleft }}</text>
			<marquee class="tab-text">
				{{ tabtext }}
			</marquee>
			<text class="tab-more"></text>
		</div>
		<div class="wgpro-frglayout" if="{{ isMenu }}">
			<list
				class="wgpro-listlayout3"
				bounces="true"
				onscroll="onScroll"
				onscrolltop="onScrollTop"
				onscrollbottom="onScrollBottom"
				onscrolltouchup="onScrollTouchup"
			>
				<list-item
					for="{{ pathshowmenuList }}"
					class="wgpro-item4"
					type="item1"
					style="background-color: {{ $item.color }};"
					ontouchstart="htm(1, $item.num)"
					ontouchend="htm(0, $item.num)"
					onclick="toRunMenu($item.id)"
				>
					<text
						class="wgpro-item-texts-text2"
						style="color: {{ $item.textcolor }};"
					>
						{{ $item.name }}
					</text>
				</list-item>
			</list>
		</div>
		<div class="wgpro-frglayout" else>
			<div class="wgpro-listlayout-gap"></div>
			<list
				class="wgpro-listlayout"
				bounces="true"
				onscroll="onScroll"
				onscrolltop="onScrollTop"
				onscrollbottom="onScrollBottom"
				onscrolltouchup="onScrollTouchup"
			>
				<list-item
					for="{{ pathshowList }}"
					class="wgpro-item3"
					type="item1"
					style="height: 100px;background-color: {{ $item.color }};"
					ontouchstart="ht(1, $item.num)"
					ontouchend="ht(0, $item.num)"
					onclick="toRun($item.id, $item.uri, $item.isfile, $item.name)"
					onlongpress="toRunLong($item.id, $item.num, $item.isfile)"
				>
					<div class="wgpro-item-left" show="{{ $item.show }}">
						<img
							class="wgpro-item-left-icon"
							src="/common/mipmap/{{ $item.ico }}.png"
						/>
					</div>
					<div class="wgpro-item-texts-none">
						<marquee class="wgpro-item-texts-text">
							{{ $item.name }}
						</marquee>
						<marquee class="wgpro-item-texts-subtext">
							{{ $item.info }}
						</marquee>
					</div>
				</list-item>
			</list>
		</div>
	</div>
</template>

<script>
import file from "@system.file";
export default {
	private: {
		pathName: "",
		pathUri: "",
		pathshowList: [],
		pathshowmenuList: [],
		menuflag: "def",
		tabtext: "",
		tabtextleft: "‹",
		isMenu: false,
	},
	ht(t, i) {
		if (t) eval("this.pathshowList[" + i + "]['color'] = 'black'");
		else eval("this.pathshowList[" + i + "]['color'] = '#3c3c3c'");
	},
	htm(t, i) {
		if (t) eval("this.pathshowmenuList[" + i + "]['color'] = 'black'");
		else eval("this.pathshowmenuList[" + i + "]['color'] = '#3c3c3c'");
	},
	onBackPress() {
		if (!this.isMenu) this.$app.$def.toCancel(true);
		else {
			this.$app.$def.shortVib(true);
			this.opmenu(false);
		}
		return true;
	},
	onInit() {
		this.opmenu(false);
	},
	onReady() {
		this.pathshowmenuListReady();
		this.pathshowListReady();
	},
	toBack() {
		if (!this.isMenu) this.$app.$def.goBack();
	},
	toRun(id, uri, isfile, name) {
		if (id == "");
		else if (id == "../") this.toBack();
		else {
			if (isfile) {
				const getSubstringAfter = (originalStr, targetStr) => {
					// 从后向前查找目标字符串
					const index = originalStr.lastIndexOf(targetStr);

					// 未找到时返回空字符串
					if (index === -1) return "";

					// 计算目标字符串之后的起始位置
					const startPosition = index + targetStr.length;

					// 从计算位置截取到末尾
					return originalStr.slice(startPosition);
				};
				let type = getSubstringAfter(name, ".");
				let tabtext = "menu.pathshowlist.itemfile.item4.name";
				if (type == "json") {
					this.menuflag = "fileopen.fow_text";
					tabtext = "menu.pathshowlist.fileopenway.item1.name";
				} else this.menuflag = "fileopenway";
				this.opmenu(true, this.$t(tabtext));
			} else {
				this.$app.$def.goReplacePageWithParams(
					"pages/ui/acts/filemanger/pathshow",
					{
						pathName: this.pathName,
						pathUri: uri,
					}
				);
			}
		}
	},
	toRunLong(id, num, isfile) {
		this.menuflag = "def";
		this.selectItemNum = num;
		this.ht(0, num); //fix item color
		if (id == "../") this.opmenu(true);
		else {
			if (isfile) this.menuflag = "itemfile";
			else this.menuflag = "itempath";
			this.opmenu(true);
		}
	},
	toRunMenu(id) {
		let needoffmenu = true;
		if (id == "") needoffmenu = false;
		else if (id == "update")
			this.$app.$def.goReplacePageWithParams(
				"pages/ui/acts/filemanger/pathshow",
				{
					pathName: this.pathName,
					pathUri: this.pathUri,
				}
			);
		else if (id == "openway") {
			needoffmenu = false;
			this.menuflag = "fileopenway";
			this.opmenu(true, this.$t("menu.pathshowlist.itemfile.item4.name"));
		} else if (id.startsWith("fow_")) {
			//文件打开方式
			needoffmenu = false;
			this.menuflag = "fileopen." + id;
			let tabtext = "";
			if (id == "fow_text")
				tabtext = "menu.pathshowlist.fileopenway.item1.name";
			else if (id == "fow_photo")
				tabtext = "menu.pathshowlist.fileopenway.item2.name";
			else if (id == "fow_music")
				tabtext = "menu.pathshowlist.fileopenway.item3.name";
			else if (id == "fow_video")
				tabtext = "menu.pathshowlist.fileopenway.item4.name";
			else if (id == "fow_zip")
				tabtext = "menu.pathshowlist.fileopenway.item5.name";
			else if (id == "fow_other")
				tabtext = "menu.pathshowlist.fileopenway.item6.name";
			this.opmenu(true, this.$t(tabtext));
		} else if (id.startsWith("fo_")) {
			//打开文件
		} else if (id == "back");
		else if (id == "back_fileopen") {
			needoffmenu = false;
			this.menuflag = "fileopenway";
			this.opmenu(true, this.$t("menu.pathshowlist.itemfile.item4.name"));
		}
		this.menuflag = "def";
		if (needoffmenu) this.opmenu(false);
	},
	opmenu(can, tabtext = this.$t("app.menu")) {
		this.pathshowmenuListReady();
		if (can) {
			this.tabtext = tabtext;
			this.tabtextleft = "";
			this.isMenu = true;
		} else {
			this.tabtext = this.pathName;
			this.tabtextleft = "‹";
			this.isMenu = false;
		}
	},
	pathshowListReady() {
		file.list({
			uri: this.pathUri,
			success: (data) => {
				this.pathLoad(data.fileList);
			},
			fail: () => {
				this.$app.$def.toTips("", this.$t("tips.fail"));
			},
		});
	},
	pathshowmenuListReady() {
		this.pathshowmenuList = []; //清空
		let menulistlen = 4; //默认菜单个数
		if (this.menuflag == "itempath") menulistlen = 9; //文件夹菜单个数
		else if (this.menuflag == "itemfile") menulistlen = 10; //文件菜单个数
		else if (this.menuflag == "fileopenway") menulistlen = 7; //文件打开方式个数
		else if (this.menuflag == "fileopen.fow_text")
			menulistlen = 3; //文件打开方式-文本个数
		else if (this.menuflag == "fileopen.fow_photo")
			menulistlen = 2; //文件打开方式-图片个数
		else if (this.menuflag == "fileopen.fow_music")
			menulistlen = 2; //文件打开方式-音频个数
		else if (this.menuflag == "fileopen.fow_video")
			menulistlen = 1; //文件打开方式-视频个数
		else if (this.menuflag == "fileopen.fow_zip")
			menulistlen = 1; //文件打开方式-压缩个数
		else if (this.menuflag == "fileopen.fow_other") menulistlen = 1; //文件打开方式-其他个数
		let tol = menulistlen + 1; //1 个缓冲垫底
		for (let i = 0; i < tol; i++) {
			let inx = i + 1;
			let list_num = -1;
			let list_color = "";
			let list_textcolor = "";
			let list_id = "";
			let list_name = "";
			if (inx <= menulistlen) {
				let name = "";
				let id = "";
				eval(
					"name = this.$t('menu.pathshowlist." +
						this.menuflag +
						".item" +
						inx +
						".name')"
				);
				eval(
					"id = this.$t('menu.pathshowlist." +
						this.menuflag +
						".item" +
						inx +
						".id')"
				);
				list_num = i;
				list_color = "#3c3c3c";
				if (inx == menulistlen) list_textcolor = "red";
				else list_textcolor = "white";
				list_id = id;
				list_name = name;
			}
			this.pathshowmenuList.push({
				num: list_num,
				color: list_color,
				textcolor: list_textcolor,
				id: list_id,
				name: list_name,
			});
		}
	},
	pathLoad(data) {
		this.pathshowList = [];
		let listlen = data.length;
		let tol = listlen + 1; //1垫底缓冲
		for (let i = 0; i < tol; i++) {
			let inx = i;
			let list_num = -1;
			let list_color = "";
			let list_show = false;
			let list_id = "";
			let list_uri = "";
			let list_name = "";
			let list_info = "";
			let list_ico = "";
			let list_isfile = false;
			console.log(`fuck xiaomi index=${inx} listlen=${listlen}`);
			if (i == 0) {
				list_num = inx;
				list_color = "#3c3c3c";
				list_show = true;
				list_id = "../";
				list_uri = this.pathUri;
				list_name = "...";
				list_info = this.$t("menu.pathshowlist.backpath");
				list_ico = "b5";
			} else {
				const getSubstringAfter = (originalStr, targetStr) => {
					// 从后向前查找目标字符串
					const index = originalStr.lastIndexOf(targetStr);

					// 未找到时返回空字符串
					if (index === -1) return "";

					// 计算目标字符串之后的起始位置
					const startPosition = index + targetStr.length;

					// 从计算位置截取到末尾
					return originalStr.slice(startPosition);
				};
				const formatTime = (ts) => {
					// 处理无效时间戳
					if (isNaN(ts)) return "Invalid Timestamp";

					// 转换秒级时间戳为毫秒
					const milliseconds = ts < 10000000000 ? ts * 1000 : ts;

					const date = new Date(milliseconds);

					// 检查日期是否有效
					if (isNaN(date.getTime())) return "Invalid Date";

					// 格式化为 yy-mm-dd HH:mm
					const yy = date.getFullYear().toString().slice(-2).padStart(2, "0");
					const mm = (date.getMonth() + 1).toString().padStart(2, "0");
					const dd = date.getDate().toString().padStart(2, "0");
					const HH = date.getHours().toString().padStart(2, "0");
					const min = date.getMinutes().toString().padStart(2, "0");

					return `${yy}-${mm}-${dd} ${HH}:${min}`;
				};
				if (inx - 1 <= listlen) {
					//length 文件大小
					//lastModifiedTime 上次修改时间
					let uri = data[i - 1]["uri"];
					let length = data[i - 1]["length"];
					console.log(`fuck xiaomi data i-1=${i - 1} uri=${uri}`);
					let lastModifiendTime = data[i - 1]["lastModifiedTime"];
					let info =
						formatTime(lastModifiendTime) +
						" " +
						this.$app.$def.formatDecimal(length / 1024, 1) +
						"K";
					let name = getSubstringAfter(uri, this.pathUri + "/");
					if (name) {
						let type = getSubstringAfter(name, ".");
						if (type == "json") list_ico = "b13";
						else list_ico = "b14";
					}
					list_num = inx;
					console.log(`fuck xiaomi data inx=${list_num}`);
					list_color = "#3c3c3c";
					list_show = true;
					list_id = uri;
					list_name = name;
					list_info = info;
					list_uri = uri;
					list_isfile = true;
				}
			}
			this.pathshowList.push({
				num: list_num,
				color: list_color,
				show: list_show,
				id: list_id,
				name: list_name,
				info: list_info,
				ico: list_ico,
				uri: list_uri,
				isfile: list_isfile,
			});
		}
	},
};
</script>

<style>
@import "../../../../../common/style/index.css";
@import "../../../../../common/style/wgpro.css";
</style>
