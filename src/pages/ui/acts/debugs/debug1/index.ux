<template>
	<div class="container">
		<!-- 标题区域 -->
		<div class="header">
			<text class="title">存储管理</text>
			<text class="subtitle">基于system.file实现</text>
		</div>

		<!-- 状态显示 -->
		<div class="status-bar">
			<text class="status-bar-text">存储状态: {{ storageStatus }}</text>
			<text class="status-bar-text">文件路径: internal://files/storage.bin</text>
		</div>

		<!-- 操作按钮区域 -->
		<div class="button-group">
			<input
				class="btn"
				type="button"
				value="初始化存储"
				onclick="initStorage"
			/>
			<input
				class="btn"
				type="button"
				value="清除存储"
				onclick="clearStorage"
			/>
		</div>

		<!-- 键值操作区域 -->
		<div class="form-group">
			<input
				class="input"
				type="text"
				placeholder="输入键名"
				value="{{ key }}"
				onchange="updateKey"
			/>
			<input
				class="input"
				type="text"
				placeholder="输入值"
				value="{{ value }}"
				onchange="updateValue"
			/>
		</div>

		<div class="button-group">
			<input class="btn" type="button" value="设置值" onclick="setValue" />
			<input class="btn" type="button" value="获取值" onclick="getValue" />
			<input class="btn" type="button" value="删除键" onclick="deleteKey" />
		</div>

		<!-- 结果显示区域 -->
		<div class="result-container">
			<text class="result-title">操作结果:</text>
			<text class="result-text">{{ result }}</text>
		</div>

		<!-- 存储内容显示区域 -->
		<div class="storage-container">
			<text class="storage-title">当前存储内容:</text>
				<text class="storage-content">{{ storageContent }}</text>
		</div>

		<!-- 日志区域 -->
		<div class="log-container">
			<text class="log-title">操作日志:</text>
			<scroll class="log-content" scroll-y="true">
				<text class="log-content-text" for="{{ logs }}">{{ $item }}</text>
			</scroll>
		</div>
	</div>
</template>

<style>
.container {
	flex-direction: column;
	padding: 20px;
	background-color: #f5f5f5;
}

.header {
	flex-direction: column;
	align-items: center;
	margin-bottom: 20px;
}

.title {
	font-size: 32px;
	color: #333;
	font-weight: bold;
}

.subtitle {
	font-size: 24px;
	color: #666;
	margin-top: 10px;
}

.status-bar {
	flex-direction: column;
	background-color: #e0e0e0;
	padding: 15px;
	border-radius: 8px;
	margin-bottom: 20px;
}

.status-bar-text {
	font-size: 24px;
	color: #444;
	margin: 5px 0;
}

.button-group {
	flex-direction: row;
	justify-content: space-around;
	margin-bottom: 20px;
}

.btn {
	width: 200px;
	height: 80px;
	background-color: #4a90e2;
	color: white;
	font-size: 24px;
	border-radius: 8px;
}

.form-group {
	height: 250px;
	flex-direction: column;
	margin-bottom: 20px;
	flex-direction: column;
	align-items: center;
}

.input {
	height: 80px;
	border: 1px solid #ccc;
	border-radius: 8px;
	padding: 0 15px;
	margin-bottom: 15px;
	font-size: 24px;
}

.result-container,
.storage-container,
.log-container {
	background-color: white;
	border-radius: 8px;
	padding: 15px;
	margin-bottom: 20px;
	border: 1px solid #ddd;
	flex-direction: column;
	align-items: center;
}

.result-title,
.storage-title,
.log-title {
	font-size: 28px;
	color: #333;
	font-weight: bold;
	margin-bottom: 10px;
}

.result-text {
	font-size: 24px;
	color: #e74c3c;
}

.storage-content {
	height: 300px;
	font-size: 22px;
	color: #444;
	font-family: monospace;
}

.log-content {
	width: 100%;
	height: 200px;
	flex-direction: column;
}

.log-content-text {
	font-size: 22px;
	color: #666;
	line-height: 36px;
}
</style>

<script>
import storage from "../../../../../common/scripts/storage.js";
import prompt from "@system.prompt";

export default {
	private: {
		key: "test_key",
		value: "test_value",
		result: "",
		logs: [],
		storageStatus: "未初始化",
		storageContent: "",
	},

	onInit() {
		this.addLog("页面初始化完成");
		this.updateStorageContent();
	},

	addLog(message) {
		const timestamp = new Date().toLocaleTimeString();
		this.logs.unshift(`[${timestamp}] ${message}`);
		// 限制日志数量
		if (this.logs.length > 20) {
			this.logs.pop();
		}
	},

	updateKey(e) {
		this.key = e.value;
	},

	updateValue(e) {
		this.value = e.value;
	},

	initStorage() {
		this.addLog("开始初始化存储...");
		this.storageStatus = "初始化中...";

		storage.init({
			success: (msg) => {
				this.addLog(msg);
				this.storageStatus = "已初始化";
				prompt.showToast({ message: msg });
				this.updateStorageContent();
			},
			fail: (err) => {
				this.addLog(`初始化失败: ${err}`);
				this.storageStatus = "初始化失败";
				prompt.showToast({ message: `失败: ${err}` });
			},
		});
	},

	clearStorage() {
		this.addLog("清除存储数据...");

		storage.clear({
			success: (msg) => {
				this.addLog(msg);
				prompt.showToast({ message: msg });
				this.updateStorageContent();
			},
			fail: (err) => {
				this.addLog(`清除失败: ${err}`);
				prompt.showToast({ message: `失败: ${err}` });
			},
		});
	},

	setValue() {
		if (!this.key) {
			prompt.showToast({ message: "请输入键名" });
			return;
		}

		this.addLog(`设置键值: ${this.key} = ${this.value}`);

		storage.set({
			key: this.key,
			value: this.value,
			success: (msg) => {
				this.result = `设置成功: ${this.key} = ${this.value}`;
				this.addLog(msg);
				prompt.showToast({ message: msg });
				this.updateStorageContent();
			},
			fail: (err) => {
				this.result = `设置失败: ${err}`;
				this.addLog(`设置失败: ${err}`);
				prompt.showToast({ message: `失败: ${err}` });
			},
		});
	},

	getValue() {
		if (!this.key) {
			prompt.showToast({ message: "请输入键名" });
			return;
		}

		this.addLog(`获取键值: ${this.key}`);

		storage.get({
			key: this.key,
			success: (value) => {
				this.result = `获取成功: ${this.key} = ${value}`;
				this.addLog(`获取成功: ${this.key} = ${value}`);
				prompt.showToast({ message: `值: ${value}` });
			},
			fail: (err) => {
				this.result = `获取失败: ${err}`;
				this.addLog(`获取失败: ${err}`);
				prompt.showToast({ message: `失败: ${err}` });
			},
		});
	},

	deleteKey() {
		if (!this.key) {
			prompt.showToast({ message: "请输入键名" });
			return;
		}

		this.addLog(`删除键: ${this.key}`);

		storage.delete({
			key: this.key,
			success: (msg) => {
				this.result = `删除成功: ${this.key}`;
				this.addLog(msg);
				prompt.showToast({ message: msg });
				this.updateStorageContent();
			},
			fail: (err) => {
				this.result = `删除失败: ${err}`;
				this.addLog(`删除失败: ${err}`);
				prompt.showToast({ message: `失败: ${err}` });
			},
		});
	},

	updateStorageContent() {
		// 模拟获取存储内容
		// 实际项目中可能需要存储模块提供获取所有数据的方法
		this.storageContent = "正在加载存储内容...";

		// 获取示例数据
		storage.get({
			key: "wgsettings_wgchat_roomlist",
			success: (value) => {
				this.storageContent = `wgsettings_wgchat_roomlist: ${value}`;
			},
			fail: () => {
				this.storageContent = "获取存储内容失败";
			},
		});
	},
};
</script>
