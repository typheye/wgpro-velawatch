<template>
	<div class="page">
		<div class="tab" onclick="toBack()">
			<text class="tab-back">â€¹</text>
			<marquee class="tab-text">
				{{ $t("acts.settings.browser.tabtext") }}
			</marquee>
			<text class="tab-more"></text>
		</div>
		<scroll class="scroll-root" scroll-y="true">
			<div class="wgpro-deflayout">
				<div class="wgpro-items-group">
					<div
						class="wgpro-item"
						style="background-color: {{ itc_p1v1 }}"
						ontouchstart="ht(1, 'p1v1')"
						ontouchend="ht(0, 'p1v1')"
						onclick="toRun('')"
					>
						<div class="wgpro-item-left">
							<img class="wgpro-item-left-icon" src="/common/mipmap/a78.png" />
						</div>
						<div class="wgpro-item-texts">
							<marquee class="wgpro-item-texts-text">
								{{ $t("acts.settings.browser.p1.item1.text") }}
							</marquee>
							<marquee class="wgpro-item-texts-subtext">
								{{ $t("acts.settings.browser.p1.item1.subtext") }}
							</marquee>
						</div>
						<div class="wgpro-item-right">
							<switch
								checked="{{ swit_it1_state }}"
								onchange="switchange('wgsettings_browser_hideDebug','swit_it1_state')"
								class="wgpro-item-right-switch"
							/>
						</div>
					</div>
					<div
						class="wgpro-item"
						style="background-color: {{ itc_p1v2 }}"
						ontouchstart="ht(1, 'p1v2')"
						ontouchend="ht(0, 'p1v2')"
						onclick="toRun('')"
					>
						<div class="wgpro-item-left">
							<img class="wgpro-item-left-icon" src="/common/mipmap/a91.png" />
						</div>
						<div class="wgpro-item-texts-none">
							<marquee class="wgpro-item-texts-text">
								{{ $t("acts.settings.browser.p1.item2.text") }}
							</marquee>
							<marquee class="wgpro-item-texts-subtext">
								{{ def_url }}
							</marquee>
						</div>
					</div>
				</div>
				<div
					class="exit-choose-value"
					style="margin-top:20px;background-color: {{ itc_p0v0 }}"
					ontouchstart="ht(1, 'p0v0')"
					ontouchend="ht(-1, 'p0v0')"
					onclick="toBack()"
				>
					<img class="exit-choose-img" src="/common/mipmap/a23.png" />
				</div>
				<div class="wgpro-gap-bottom" />
			</div>
		</scroll>
	</div>
</template>

<script>
import storage from "../../../../../utils/storage.js";
export default {
	private: {
		itc_p0v0: "#3c3c3c",
		itc_p1v1: "rgba(0,0,0,0)",
		itc_p1v2: "rgba(0,0,0,0)",
		swit_it1_state: false,
		def_url: "Loading...",
	},
	ht(t, i) {
		if (t == 1) eval("this.itc_" + i + " = 'black'");
		else if (t == -1) eval("this.itc_" + i + " = '#3c3c3c'");
		else eval("this.itc_" + i + " = 'rgba(0,0,0,0)'");
	},
	onBackPress() {
		this.$app.$def.toCancel(true);
		return true;
	},
	onReady() {
		this.switload();
	},
	toBack() {
		this.$app.$def.goBack();
	},
	toRun(id) {
		if (id == "");
	},
	switload() {
		storage.gets({
			keys: ["wgsettings_browser_hideDebug", "wgsettings_browser_defUri"],
			success: (datas) => {
				if (datas.wgsettings_browser_hideDebug == true)
					this.swit_it1_state = true;
				if (!datas.wgsettings_browser_defUri) this.def_url = "";
				else this.def_url = datas.wgsettings_browser_defUri;
			},
			fail: () => {
				this.def_url = "";
			},
		});
	},
	switchange(key, id, e) {
		const state = e["checked"];
		eval("this." + id + " = " + state);
		this.$app.$def.settingsChange(key, state);
	},
	toRun() {
		this.$app.$def.goReplacePageWithParams("pages/ui/acts/browser/setdefuri", {
			textValues: JSON.stringify({
				msg: this.def_url,
			}),
		});
	},
};
</script>

<style>
@import "../../../../../common/style/index.css";
@import "../../../../../common/style/wgpro.css";
</style>
