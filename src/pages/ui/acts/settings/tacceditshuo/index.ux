<template>
	<div class="page" @swipe="right">
		<div class="tab">
			<text class="tab-back"></text>
			<marquee class="tab-text">
				{{ $t("acts.settings.tacceditshuo.tabtext") }}
			</marquee>
			<text class="tab-more"></text>
		</div>
		<div class="exit" if="{{ isLoading }}">
			<text class="exit-tip-text">Loading...</text>
		</div>
		<scroll class="scroll-root" scroll-y="true" else>
			<div class="wgpro-deflayout">
				<text class="exit-tip-text">
					{{ $t("edittip.tacceditshuo.text1") }}
				</text>
				<div
					class="edittext2-div"
					style="border: 4px solid {{ fc_v0 }}"
					ontouchstart="ht(-1, 'v0')"
					ontouchend="ht(0, 'v0')"
					onclick="toEditText"
				>
					<marquee class="edittext2" @click="changeState">
						{{ inputValues.msg }}
					</marquee>
				</div>
				<div class="exit-choose">
					<div
						class="exit-choose-value"
						style="background-color: {{ fc_v1 }}"
						ontouchstart="ht(1, 'v1')"
						ontouchend="ht(0, 'v1')"
						onclick="toBack()"
					>
						<img class="exit-choose-img" src="/common/mipmap/a29.png" />
					</div>
					<div
						class="exit-choose-value"
						style="background-color: {{ fc_v2 }}"
						ontouchstart="ht(1, 'v2')"
						ontouchend="ht(0, 'v2')"
						onclick="toLaunch()"
					>
						<img class="exit-choose-img" src="/common/mipmap/a28.png" />
					</div>
				</div>
				<div class="wgpro-gap-bottom" />
			</div>
		</scroll>
	</div>
</template>

<script>
import fetch from "../../../../../utils/fetch.js";
import storage from "../../../../../utils/storage.js";
export default {
	private: {
		fc_v0: "#3c3c3c",
		fc_v1: "#3c3c3c",
		fc_v2: "#3c3c3c",
		isLoading: false,
		textValues: "",
		inputValues: { msg: "" },
		usrNick: "",
		usrUid: "",
		usrCookie: "",
	},
	ht(t, i) {
		if (t == 1) eval("this.fc_" + i + " = 'black'");
		else if (t == -1) eval("this.fc_" + i + " = '#32618D'");
		else eval("this.fc_" + i + " = '#3c3c3c'");
	},
	onReady() {
		this.inputReady();
		this.usrLoad();
	},
	usrLoad() {
		storage.gets({
			keys: ["wgsettings_taccount_username","wgsettings_taccount_cookie"],
			success: (datas) => {
				if (datas.wgsettings_taccount_username) this.usrUid = datas.wgsettings_taccount_username;
				if (datas.wgsettings_taccount_cookie) this.usrCookie = datas.wgsettings_taccount_cookie;
			},
		});
	},
	inputReady() {
		if (this.textValues) {
			const TVs = JSON.parse(this.textValues);
			this.inputValues["msg"] = TVs["msg"];
		}
	},
	onBackPress() {
		this.$app.$def.toCancel(false);
		return true;
	},
	toLaunch() {
		this.isLoading = true;
		if (false)
		//if (!this.inputValues["msg"])
			this.$app.$def.toTips("", this.$t("acts.settings.tacceditshuo.err1")),
				(this.isLoading = false);
		else {
			const timestamp0 = Date.now();
			fetch.fetch({
				url: this.$app.$def.getTS("taccServerURL") + "api.php",
				data_GET: {
					type: "set_shuo_easy",
					uid: this.usrUid,
					cookie: this.usrCookie,
					value: this.inputValues["msg"],
					time: timestamp0,
				},
				method: "GET",
				responseType: "text",
				success: (response) => {
					if (response.code == 200) {
						if (response.data) {
							const reqback = JSON.parse(response.data);
							if (reqback["code"] == "200") {
								this.$app.$def.settingsChange(
									"wgsettings_taccount_userinfo",
									this.inputValues["msg"]
								);
								this.toBack();
							} else
								this.$app.$def.toTips(
									"",
									this.$t("acts.settings.tacceditshuo.err3") + reqback["msg"]
								),
									(this.isLoading = false);
						} else
							this.$app.$def.toTips(
								"",
								this.$t("acts.settings.tacceditshuo.err3") + response.data
							),
								(this.isLoading = false);
					} else
						this.$app.$def.toTips(
							"",
							this.$t("acts.settings.tacceditshuo.err2")
						),
							(this.isLoading = false);
				},
				fail: () => {
					this.$app.$def.toTips("", this.$t("acts.settings.tacceditshuo.err2"));
					this.isLoading = false;
				},
			});
		}
	},
	toBack() {
		this.$app.$def.goReplacePage("pages/ui/acts/settings/taccount");
	},
	toEditText() {
		this.$app.$def.shortVib(true);
		storage.gets({
			keys: ["wgsettings_keyboardUseT9", "wgsettings_keyboardUseLongVibrate"],
			success: (datas) => {
				let _keyboardtype = "QWERTY";
				let _vibratemode = "short";
				if (datas.wgsettings_keyboardUseT9 == true) _keyboardtype = "T9";
				if (datas.wgsettings_keyboardUseLongVibrate == true)
					_vibratemode = "long";
				this.$app.$def.goReplacePageWithParams("pages/ui/popup/input", {
					reqPage: "pages/ui/acts/settings/tacceditshuo",
					textValues: JSON.stringify(this.inputValues),
					textIndex: "msg",
					keyboardtype: _keyboardtype,
					vibratemode: _vibratemode,
				});
			},
		});
	},
};
</script>

<style>
@import "../../../../../common/style/index.css";
@import "../../../../../common/style/wgpro.css";
</style>
